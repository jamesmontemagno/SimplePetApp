@page "/pets"
@inject IPetProfileService PetProfileService
@inject NavigationManager Navigation

<PageTitle>Pet Profiles</PageTitle>

<div class="pet-profiles-container">
    <div class="page-header">
        <h1>üêæ Pet Profiles</h1>
        <button class="btn btn-primary" @onclick="AddNewPet">
            ‚ûï Add New Pet
        </button>
    </div>

    @if (isLoading)
    {
        <div class="loading">
            <p>Loading pet profiles...</p>
        </div>
    }
    else if (!profiles.Any())
    {
        <div class="no-profiles">
            <div class="no-profiles-content">
                <h2>üêï No Pet Profiles Yet!</h2>
                <p>Start by adding your first pet profile to track your furry friends.</p>
                <button class="btn btn-primary" @onclick="AddNewPet">
                    ‚ûï Add Your First Pet
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="profiles-grid">
            @foreach (var profile in profiles)
            {
                <div class="profile-card" @key="profile.Id">
                    <div class="profile-image">
                        @if (!string.IsNullOrEmpty(profile.PhotoUrl))
                        {
                            <img src="@profile.PhotoUrl" alt="@profile.Name" />
                        }
                        else
                        {
                            <div class="no-image">üêæ</div>
                        }
                    </div>
                    <div class="profile-info">
                        <h3>@profile.Name</h3>
                        @if (!string.IsNullOrEmpty(profile.Breed))
                        {
                            <p class="breed">@profile.Breed</p>
                        }
                        @if (profile.BirthDate.HasValue)
                        {
                            <p class="age">Age: @GetAge(profile.BirthDate.Value)</p>
                        }
                        @if (!string.IsNullOrEmpty(profile.Description))
                        {
                            <p class="description">@GetTruncatedDescription(profile.Description)</p>
                        }
                    </div>
                    <div class="profile-actions">
                        <button class="btn btn-secondary" @onclick="() => ViewProfile(profile.Id)">
                            üëÅÔ∏è View
                        </button>
                        <button class="btn btn-outline" @onclick="() => EditProfile(profile.Id)">
                            ‚úèÔ∏è Edit
                        </button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteDialog(profile)">
                            üóëÔ∏è Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<PetProfileDeleteDialog 
    IsVisible="showDeleteDialog" 
    PetName="@(profileToDelete?.Name ?? "")"
    OnConfirm="ConfirmDelete"
    OnCancel="CancelDelete" />

@code {
    private List<PetProfile> profiles = [];
    private bool isLoading = true;
    private bool showDeleteDialog = false;
    private PetProfile? profileToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfiles();
    }

    private async Task LoadProfiles()
    {
        isLoading = true;
        try
        {
            profiles = await PetProfileService.GetProfilesAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddNewPet()
    {
        Navigation.NavigateTo("/pets/add");
    }

    private void ViewProfile(Guid id)
    {
        Navigation.NavigateTo($"/pets/{id}");
    }

    private void EditProfile(Guid id)
    {
        Navigation.NavigateTo($"/pets/edit/{id}");
    }

    private void ShowDeleteDialog(PetProfile profile)
    {
        profileToDelete = profile;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (profileToDelete != null)
        {
            await PetProfileService.DeleteProfileAsync(profileToDelete.Id);
            await LoadProfiles();
        }
        showDeleteDialog = false;
        profileToDelete = null;
    }

    private Task CancelDelete()
    {
        showDeleteDialog = false;
        profileToDelete = null;
        return Task.CompletedTask;
    }

    private string GetAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate.Date > today.AddYears(-age)) age--;
        
        if (age == 0)
        {
            var months = (today.Year - birthDate.Year) * 12 + today.Month - birthDate.Month;
            return months <= 1 ? "Less than 1 month" : $"{months} months";
        }
        
        return age == 1 ? "1 year" : $"{age} years";
    }

    private string GetTruncatedDescription(string description)
    {
        const int maxLength = 100;
        if (description.Length <= maxLength)
            return description;
        
        return description[..maxLength] + "...";
    }
}