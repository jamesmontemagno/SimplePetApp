@using MyPetVenues.Models
@using MyPetVenues.Services
@inject IMessageService MessageService

<div class="messages-container">
    <h3>💬 Messages</h3>
    
    <div class="message-actions">
        <button class="btn btn-primary" @onclick="ShowComposeMessage">
            ✉️ New Message
        </button>
        <button class="btn btn-secondary" @onclick="ShowPrivacySettings">
            🔒 Privacy Settings
        </button>
    </div>

    @if (ShowCompose)
    {
        <div class="compose-message">
            <h4>Compose Message</h4>
            <EditForm Model="@NewMessage" OnValidSubmit="@SendMessage">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="recipient">To (User ID):</label>
                    <InputNumber id="recipient" @bind-Value="NewMessage.RecipientId" class="form-control" placeholder="Enter recipient user ID" />
                    <ValidationMessage For="() => NewMessage.RecipientId" />
                </div>

                <div class="form-group">
                    <label for="subject">Subject:</label>
                    <InputText id="subject" @bind-Value="NewMessage.Subject" class="form-control" placeholder="Message subject" />
                    <ValidationMessage For="() => NewMessage.Subject" />
                </div>

                <div class="form-group">
                    <label for="message-type">Type:</label>
                    <InputSelect id="message-type" @bind-Value="NewMessage.Type" class="form-control">
                        <option value="@MessageType.Direct">💬 Direct Message</option>
                        <option value="@MessageType.EventInvite">🎉 Event Invite</option>
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="content">Message:</label>
                    <InputTextArea id="content" @bind-Value="NewMessage.Content" class="form-control" rows="4" placeholder="Write your message..." />
                    <ValidationMessage For="() => NewMessage.Content" />
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                        @if (IsSubmitting)
                        {
                            <span>Sending...</span>
                        }
                        else
                        {
                            <span>Send Message</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelCompose">Cancel</button>
                </div>
            </EditForm>
        </div>
    }

    @if (ShowPrivacy)
    {
        <div class="privacy-settings">
            <h4>Privacy Settings</h4>
            <EditForm Model="@PrivacySettings" OnValidSubmit="@UpdatePrivacySettings">
                <div class="form-group">
                    <label class="checkbox-label">
                        <InputCheckbox @bind-Value="PrivacySettings.AllowMessagesFromAnyone" />
                        Allow messages from anyone
                    </label>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <InputCheckbox @bind-Value="PrivacySettings.AllowEventInvites" />
                        Allow event invitations
                    </label>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <InputCheckbox @bind-Value="PrivacySettings.ShowProfileToEveryone" />
                        Show profile to everyone
                    </label>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <InputCheckbox @bind-Value="PrivacySettings.ShowLocationHistory" />
                        Show location history
                    </label>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save Settings</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelPrivacy">Cancel</button>
                </div>
            </EditForm>
        </div>
    }

    <div class="message-filters">
        <button class="filter-btn @(MessageFilter == "all" ? "active" : "")" @onclick='() => SetFilter("all")'>
            All (@MessagesList.Count)
        </button>
        <button class="filter-btn @(MessageFilter == "unread" ? "active" : "")" @onclick='() => SetFilter("unread")'>
            Unread (@MessagesList.Count(m => !m.IsRead))
        </button>
        <button class="filter-btn @(MessageFilter == "sent" ? "active" : "")" @onclick='() => SetFilter("sent")'>
            Sent (@MessagesList.Count(m => m.SenderId == (CurrentUserId ?? 1)))
        </button>
    </div>

    <div class="messages-list">
        @if (FilteredMessages.Any())
        {
            @foreach (var message in FilteredMessages.OrderByDescending(m => m.CreatedDate))
            {
                <div class="message-card @(message.IsRead ? "" : "unread") @(message.SenderId == (CurrentUserId ?? 1) ? "sent" : "received")">
                    <div class="message-header">
                        <div class="message-participants">
                            @if (message.SenderId == (CurrentUserId ?? 1))
                            {
                                <span class="participant">
                                    📤 To: @(message.Recipient?.DisplayName ?? $"User {message.RecipientId}")
                                </span>
                            }
                            else
                            {
                                <span class="participant">
                                    📥 From: @(message.Sender?.DisplayName ?? $"User {message.SenderId}")
                                </span>
                            }
                            
                            <span class="message-type-badge">
                                @GetMessageTypeIcon(message.Type) @message.Type
                            </span>
                        </div>
                        
                        <div class="message-meta">
                            <span class="message-date">
                                @message.CreatedDate.ToString("MMM dd, yyyy hh:mm tt")
                            </span>
                            @if (!message.IsRead && message.RecipientId == (CurrentUserId ?? 1))
                            {
                                <span class="unread-indicator">●</span>
                            }
                        </div>
                    </div>
                    
                    <h5 class="message-subject">@message.Subject</h5>
                    <p class="message-content">@message.Content</p>
                    
                    <div class="message-actions">
                        @if (!message.IsRead && message.RecipientId == (CurrentUserId ?? 1))
                        {
                            <button class="btn-action" @onclick="() => MarkAsRead(message.Id)">
                                📖 Mark as Read
                            </button>
                        }
                        
                        @if (message.SenderId != (CurrentUserId ?? 1))
                        {
                            <button class="btn-action" @onclick="() => ReplyToMessage(message)">
                                💬 Reply
                            </button>
                        }
                        
                        <button class="btn-action delete" @onclick="() => DeleteMessage(message.Id)">
                            🗑️ Delete
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-messages">
                @if (MessageFilter == "unread")
                {
                    <p>No unread messages.</p>
                }
                else if (MessageFilter == "sent")
                {
                    <p>No sent messages.</p>
                }
                else
                {
                    <p>No messages yet. Start a conversation!</p>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public int? CurrentUserId { get; set; }

    private List<Message> MessagesList = new();
    private UserPrivacySettings PrivacySettings = new() { UserId = 1 };
    private string MessageFilter = "all";
    private bool ShowCompose = false;
    private bool ShowPrivacy = false;
    private bool IsSubmitting = false;

    private Message NewMessage = new()
    {
        SenderId = 1,
        RecipientId = 2,
        Subject = "",
        Content = "",
        Type = MessageType.Direct
    };

    private List<Message> FilteredMessages => MessageFilter switch
    {
        "unread" => MessagesList.Where(m => !m.IsRead && m.RecipientId == (CurrentUserId ?? 1)).ToList(),
        "sent" => MessagesList.Where(m => m.SenderId == (CurrentUserId ?? 1)).ToList(),
        _ => MessagesList
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
        await LoadPrivacySettings();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentUserId.HasValue)
        {
            NewMessage.SenderId = CurrentUserId.Value;
            await LoadMessages();
            await LoadPrivacySettings();
        }
    }

    private async Task LoadMessages()
    {
        MessagesList = await MessageService.GetUserMessagesAsync(CurrentUserId ?? 1);
        StateHasChanged();
    }

    private async Task LoadPrivacySettings()
    {
        PrivacySettings = await MessageService.GetPrivacySettingsAsync(CurrentUserId ?? 1);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (IsSubmitting) return;
        
        IsSubmitting = true;
        try
        {
            NewMessage.SenderId = CurrentUserId ?? 1;
            await MessageService.SendMessageAsync(NewMessage);
            
            NewMessage = new()
            {
                SenderId = CurrentUserId ?? 1,
                RecipientId = 2,
                Subject = "",
                Content = "",
                Type = MessageType.Direct
            };
            
            ShowCompose = false;
            await LoadMessages();
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task UpdatePrivacySettings()
    {
        await MessageService.UpdatePrivacySettingsAsync(PrivacySettings);
        ShowPrivacy = false;
    }

    private async Task MarkAsRead(int messageId)
    {
        await MessageService.MarkAsReadAsync(messageId);
        await LoadMessages();
    }

    private async Task DeleteMessage(int messageId)
    {
        await MessageService.DeleteMessageAsync(messageId);
        await LoadMessages();
    }

    private void ShowComposeMessage()
    {
        ShowCompose = true;
        ShowPrivacy = false;
    }

    private void ShowPrivacySettings()
    {
        ShowPrivacy = true;
        ShowCompose = false;
    }

    private void CancelCompose()
    {
        ShowCompose = false;
        NewMessage = new()
        {
            SenderId = CurrentUserId ?? 1,
            RecipientId = 2,
            Subject = "",
            Content = "",
            Type = MessageType.Direct
        };
    }

    private void CancelPrivacy()
    {
        ShowPrivacy = false;
    }

    private void SetFilter(string filter)
    {
        MessageFilter = filter;
        StateHasChanged();
    }

    private void ReplyToMessage(Message original)
    {
        NewMessage = new()
        {
            SenderId = CurrentUserId ?? 1,
            RecipientId = original.SenderId,
            Subject = original.Subject.StartsWith("Re:") ? original.Subject : $"Re: {original.Subject}",
            Content = "",
            Type = MessageType.Direct
        };
        ShowCompose = true;
    }

    private string GetMessageTypeIcon(MessageType type)
    {
        return type switch
        {
            MessageType.EventInvite => "🎉",
            MessageType.System => "⚙️",
            MessageType.Notification => "🔔",
            _ => "💬"
        };
    }
}